esphome:
  name: smart-ac-receiver

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "dyazDNsqiACdDHORRQ2hJ8foObk3+uxjJeGrKNlu6nM="

ota:
  password: "f879519e7f883d3c24426bb90140bd14"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Smart-Ac-Receiver"
    password: "c45XAVVUtdGZ"

captive_portal:

# here we define global variables
globals:
  # this global stores the custom IR code that we recieve during "learning mode"
  - id: custom_pronto_code
    type: std::string
    restore_value: no
    initial_value: '""'

  - id: ir_product_active
    type: bool
    restore_value: no
    initial_value: 'false'

  - id: test_mode_state
    type: std::string
    restore_value: no
    initial_value: '"not_tested"'
  
  - id: learning_mode_state
    type: std::string
    restore_value: no
    initial_value: '"init"'


# sets up the ble stack on the device and listens for available devices
esp32_ble_tracker:

binary_sensor:
  # bluetooth presence sensor - presence is based on iBeacon UUID
  # in the lambda: if bluetooth is detected turn on AC, otherwise turn it off
  - platform: ble_presence
    name: "Am I Home"
    id: phone_tracker
    icon: "mdi:home"
    ibeacon_uuid: 'de98a2e9-db46-477b-8909-ddfd22c2fcff'
    ibeacon_major: 123
    ibeacon_minor: 456
    on_state:
      then:
        - lambda: |-
            if (x) {
              id(on_button).press();
            } else {
              id(off_button).press();
            }
  - platform: template
    name: "status"
    id: ir_state
    lambda: |-
      if ((id(ir_product_active))) {
        return true;
      } else {
        return false;
      }


number:
  - platform: template
    id: turn_off_temperature
    name: Turn Off Temperature
    step: 0.1
    min_value: 16
    max_value: 30
    optimistic: true
    
  - platform: template
    id: turn_on_temperature
    name: Turn On Temperature
    step: 0.1
    min_value: 16
    max_value: 30
    optimistic: true
    initial_value: 30

sensor:
  # temperature and humidity sensor
  - platform: dht
    pin: GPIO16
    model: DHT11
    temperature:
      name: "Room Temperature"
      id: room_tmp
      on_value:
        then:
          # Automation to turn AC on/off
          # Turn the AC on if current temp higher than user input
          # Turn the AC off if current temp lower than user input
          - lambda: |-
              if((*id(turn_on_temperature)).state < x && id(ir_product_active)==false) {
                id(on_button).press();
                ESP_LOGD("custom", "User Tmp: %f", (*id(turn_on_temperature)).state);
                ESP_LOGD("custom", "Recieved Tmp: %f", x);
                id(ir_product_active) = true;
              }
              if((*id(turn_off_temperature)).state > x && id(ir_product_active)==true) {
                id(off_button).press();
                ESP_LOGD("custom", "User Tmp: %f", (*id(turn_off_temperature)).state);
                ESP_LOGD("custom", "Recieved Tmp: %f", x);
                id(ir_product_active) = false;
              }
    humidity:
      name: "Room Humidity"
      id: room_hmd
    update_interval: 5s # update the sensor gui every minute

  # sensors that recieves input data from Home Assistant front end
  - platform: homeassistant
    name: "Turn AC off tmp"
    entity_id: input_number.automation_turn_ac_off_tmp
    id: turn_ac_off
  
  - platform: homeassistant
    name: "Turn AC on tmp"
    entity_id: input_number.automation_turn_ac_on_tmp
    
  # Wi-Fi signal strength sensor. Can help user to diagnos problems
  - platform: wifi_signal
    name: "WiFi Signal Sensor"
    update_interval: 60s

text_sensor:
  - platform: template
    id: remote_receiver_state
    name: "Remote Receiver state "
    lambda: |-
      if(id(test_mode_state)=="not_tested"){
        return {"Not Tested"};
      }
      else if (id(test_mode_state)=="testing"){
        return {"Testing"};
      }
      else if (id(test_mode_state)=="testing_ok"){
        return {"OK"};
      }
      else {
        return{"Error"};
      }
    update_interval: 5s
  - platform: template
    id: remote_transmitter_state
    name: "Remote Transmitter state "
    lambda: |-
      if(id(test_mode_state)=="not_tested"){
        return {"Not Tested"};
      }
      else if (id(test_mode_state)=="testing"){
        return {"Testing"};
      }
      else if (id(test_mode_state)=="testing_ok"){
        return {"OK"};
      }
      else {
        return{"Error"};
      }
    update_interval: 5s
  - platform: template
    id: learning_mode_sensor
    name: "Learning mode state"
    lambda: |-
      if(id(learning_mode_state)=="init"){
        return {"press Save Custom IR  button"};
      }
      else if (id(learning_mode_state)=="ready"){
        return {"send new IR signal to IR Receiver"};
      }
      else if (id(learning_mode_state)=="signal_saved"){
        //return {std::string("saved new IR code : ") + id(custom_pronto_code).c_str()};
        return{"new signal saved"};
      }
      else {
        return{"Error"};
      }
    update_interval: 3s
# receive incoming IR signals and dump them to log file
remote_receiver:
  pin: 
    number: GPIO23
    inverted: true
  dump: all
  # if we recieve an IR code, check if learn mode is on and if so store the code so that it will be able to be transmitted later
  # in order to avoid IR noise, store the IR signal only if the pronto code string is longer than 45 characters
  on_pronto:
    then:
      - lambda: |-
          if(id(learning_mode_state)=="ready" && x.data.length() > 45) {
            id(custom_pronto_code) = std::string(x.data.c_str());
            ESP_LOGD("custom", "saved new IR code to custom: %s", id(custom_pronto_code).c_str());
            id(learning_mode_state)="signal_saved";
          }
          else if(id(test_mode_state)=="testing"){
            ESP_LOGD("custom", "test code recieved: %s", x.data.c_str());
            id(test_mode_state)="testing_ok";
            
          }

# our IR transmitter
remote_transmitter:
  pin:
    number: GPIO32
  carrier_duty_percent: 50%
  id: my_transmitter

button:
  # button to turn on AC
  - platform: template
    name: "AC On"
    icon: "mdi:play"
    id: on_button
    on_press:
      # Each AC has a switch, when turning on/off only perform the action for an AC if its switch is turned on
      # this labmda iterates over all the ACs every time the on/off button is pressed and performs the action only if the AC's switch is turned on
      - lambda: |-
          if(id(room_ac).state) {
            auto call = id(my_transmitter).transmit();
            esphome::remote_base::ProntoData data = { "0000 006D 0058 0002 0078 0097 004B 0026 0025 004C 004A 004C 004B 0024 0027 0024 0026 0025 0026 004C 004A 004C 0025 0025 0027 0025 004B 0026 0025 0025 0026 0025 0026 0026 0025 0025 0026 0025 0027 0025 0026 0027 0025 0026 0025 0025 0027 0024 0027 0024 0026 0025 0026 0025 0026 0027 0025 0026 0025 004C 004B 0024 0074 0097 004C 0025 0026 004C 004A 004C 004A 0025 0027 0025 0026 0026 0025 004A 004B 004B 0027 0025 0026 0025 004B 0025 0027 0025 0026 0026 0025 002" };
            esphome::remote_base::ProntoProtocol().encode(call.get_data(), data);
            call.set_send_times(1);
            call.perform();
            id(ir_product_active) = true;
          }
          if(id(light_ac).state) {
            auto call = id(my_transmitter).transmit();
            esphome::remote_base::ProntoData data = { "0000 006D 0022 0000 0159 00AB 0015 0017 0015 0016 0016 0016 0015 0016 0015 0016 0016 0016 0015 0016 0015 0016 0016 0040 0015 0041 0015 0041 0017 003F 0015 0042 0014 0041 0016 0040 0015 0041 0015 0016 0015 0016 0016 0016 0015 0016 0015 0016 0016 0016 0015 0041 0016 0017 0014 0042 0015 0040 0015 0041 0015 0041 0016 0040 0015 0041 0015 0016 0015 0041 0015 06C3" };
            esphome::remote_base::ProntoProtocol().encode(call.get_data(), data);
            call.set_send_times(1);
            call.perform();
            id(ir_product_active) = true;

           
          }
          if(id(living_room_ac).state) {
            auto call = id(my_transmitter).transmit();
            esphome::remote_base::CoolixData data = { 0xB2BF20 };
            esphome::remote_base::CoolixProtocol().encode(call.get_data(), data);
            call.set_send_times(1);
            call.perform();
            id(ir_product_active) = true;
          }
          if(id(custom).state) {
            auto call = id(my_transmitter).transmit();
            esphome::remote_base::ProntoData data = { id(custom_pronto_code).c_str() };
            esphome::remote_base::ProntoProtocol().encode(call.get_data(), data);
            call.set_send_times(1);
            call.perform();
            id(ir_product_active) = true;
          }
  
  # button to turn off AC
  - platform: template
    name: "AC Off"
    icon: "mdi:pause-box-outline"
    id: off_button
    on_press:
      # send IR signals to turn on AC according to the AC type specified by the user
      - lambda: |-
          if(id(room_ac).state) {
            auto call = id(my_transmitter).transmit();
            esphome::remote_base::ProntoData data = { "0000 006D 0058 0002 0078 0097 004B 0026 0025 004C 004A 004C 004B 0024 0027 0024 0026 0025 0026 004C 004A 004C 0025 0025 0027 0025 004B 0026 0025 0025 0026 0025 0026 0026 0025 0025 0026 0025 0027 0025 0026 0027 0025 0026 0025 0025 0027 0024 0027 0024 0026 0025 0026 0025 0026 0027 0025 0026 0025 004C 004B 0024 0074 0097 004C 0025 0026 004C 004A 004C 004A 0025 0027 0025 0026 0026 0025 004A 004B 004B 0027 0025 0026 0025 004B 0025 0027 0025 0026 0026 0025 002" };
            esphome::remote_base::ProntoProtocol().encode(call.get_data(), data);
            call.set_send_times(1);
            call.perform();
            id(ir_product_active) = false;
          }
          if(id(light_ac).state) {
            auto call = id(my_transmitter).transmit();
            esphome::remote_base::ProntoData data = { "0000 006D 0022 0000 0158 00AD 0015 0016 0015 0016 0016 0016 0015 0016 0015 0016 0016 0016 0015 0016 0016 0016 0016 0040 0016 0041 0015 0041 0016 0040 0015 0041 0015 0041 0016 0040 0015 0041 0015 0017 0015 0016 0016 0016 0015 0016 0015 0016 0016 0016 0015 0041 0016 0016 0015 0041 0016 0040 0015 0041 0015 0041 0016 0040 0015 0041 0015 0016 0015 0041 0015 06C3" };
            esphome::remote_base::ProntoProtocol().encode(call.get_data(), data);
            call.set_send_times(1);
            call.perform();
            id(ir_product_active) = false;
          
          }
          if(id(living_room_ac).state) {
            auto call = id(my_transmitter).transmit();
            esphome::remote_base::CoolixData data = { 0xB27BE0 };
            esphome::remote_base::CoolixProtocol().encode(call.get_data(), data);
            call.set_send_times(1);
            id(ir_product_active) = false;
          }
          if(id(custom).state) {
            auto call = id(my_transmitter).transmit();
            esphome::remote_base::ProntoData data = { id(custom_pronto_code).c_str() };
            esphome::remote_base::ProntoProtocol().encode(call.get_data(), data);
            call.set_send_times(1);
            id(ir_product_active) = false;
          }
  - platform: template
    name: "Test Remote sensors"
    id: test_remote_button
    on_press:
      then:
        - globals.set:
            id: test_mode_state
            value: '"testing"'
        - remote_transmitter.transmit_pronto:
            data: "0000 006D 0022 0000 015A 00AA 0017 0015 0015 0016 0015 0016 0017 0015 0015 0016 0015 0016 0017 0016 0014 0016 0015 0041 0015 0041 0017 003F 0017 0040 0015 0041 0017 003F 0017 0040 0016 0040 0017 0015 0016 0014 0017 0040 0015 0016 0015 0042 0014 0016 0015 0016 0017 0015 0015 0041 0017 003F 0015 0016 0017 003F 0015 0016 0017 003F 0015 0041 0015 0041 0017 06C3"
  - platform: template
    id: save_custom_ir
    name: "Save Custom IR signal"
    on_press:
      then:
        - globals.set:
            id: learning_mode_state
            value: '"ready"'
  - platform: template
    id: learning_mode_reset
    name: "Reset custom IR"
    on_press:
      then:
        - globals.set:
            id: learning_mode_state
            value: '"init"'

switch:
  # these switches are user input that define what types of AC they have
  # that way we can send the IR signals according to their AC type
  - platform: template
    name: "Room AC"
    id: room_ac
    optimistic: true

  - platform: template
    name: "Light Simulator"
    id: light_ac
    optimistic: true

  - platform: template
    name: "Living Room AC"
    id: living_room_ac
    optimistic: true
    
  - platform: template
    name: "Custom"
    id: custom
    optimistic: true
  
  - platform: template
    name: "Custom Learn Mode"
    id: learn_mode
    optimistic: true
