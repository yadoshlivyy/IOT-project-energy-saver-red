esphome:
  name: ac-remote

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API, use the key to configure connection between device and Home Assistant
api:
  encryption:
    key: "1KMEt//8JQxaEtboIP50bbRrwcPWuKW7ux6aJUfaclE="

ota:
  password: "08fe0b48811d372c75716ce35e1f8bf8"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Ac-Remote Fallback Hotspot"
    password: "fADey9cQ9KfM"

captive_portal:

# sets up the ble stack on the device and listens for available devices
esp32_ble_tracker:

binary_sensor:
  # bluetooth presence sensor - presence is based on iBeacon UUID
  - platform: ble_presence
    name: "Am I Home"
    id: phone_tracker
    icon: "mdi:home"
    ibeacon_uuid: 'de98a2e9-db46-477b-8909-ddfd22c2fcff'
    ibeacon_major: 123
    ibeacon_minor: 456
    on_state:
      then:
        - lambda: |-
            if (x) {
              id(on_button).press();
            } else {
              id(off_button).press();
            }

sensor:
  # temperature and humidity sensor
  - platform: dht
    pin: GPIO16
    model: DHT11
    temperature:
      name: "Room Temperature"
      id: room_tmp
      on_raw_value:
        then:
          # Automation to turn AC on/off
          # Turn the AC on if current temp higher than user input
          # Turn the AC off if current temp lower than user input
          - lambda: |-
              if(id("Turn AC on tmp") <= x) {
                id(on_button).press();
              }
              if(id("Turn AC off tmp") > x) {
                id(off_button).press();
              }
    humidity:
      name: "Room Humidity"
      id: room_hmd
    update_interval: 60s # update the sensor gui every minute

  # sensors that recieves input data from Home Assistant front end
  - platform: homeassistant
    name: "Turn AC off tmp"
    entity_id: input_number.automation_turn_ac_off_tmp
  
  - platform: homeassistant
    name: "Turn AC on tmp"
    entity_id: input_number.automation_turn_ac_on_tmp
    
  # Wi-Fi signal strength sensor. Can help user to diagnos problems
  - platform: wifi_signal
    name: "WiFi Signal Sensor"
    update_interval: 60s
    

# receive incoming IR signals and dump them to log file
remote_receiver:
  pin: 
    number: GPIO15
    inverted: true
  dump: all

# our IR transmitter
remote_transmitter:
  pin:
    number: GPIO32
  carrier_duty_percent: 50%
  id: my_transmitter

button:
  # button to turn on AC
  - platform: template
    name: "AC On"
    icon: "mdi:play"
    id: on_button
    on_press:
      - lambda: |-
          if(id(room_ac).state) {
            auto call = id(my_transmitter).transmit();
            esphome::remote_base::ProntoData data = { "0000 006D 0058 0002 0078 0097 004B 0026 0025 004C 004A 004C 004B 0024 0027 0024 0026 0025 0026 004C 004A 004C 0025 0025 0027 0025 004B 0026 0025 0025 0026 0025 0026 0026 0025 0025 0026 0025 0027 0025 0026 0027 0025 0026 0025 0025 0027 0024 0027 0024 0026 0025 0026 0025 0026 0027 0025 0026 0025 004C 004B 0024 0074 0097 004C 0025 0026 004C 004A 004C 004A 0025 0027 0025 0026 0026 0025 004A 004B 004B 0027 0025 0026 0025 004B 0025 0027 0025 0026 0026 0025 002" };
            esphome::remote_base::ProntoProtocol().encode(call.get_data(), data);
            call.set_send_times(1);
            call.perform();
          }
          if(id(light_ac).state) {
            auto call = id(my_transmitter).transmit();
            esphome::remote_base::ProntoData data = { "0000 006D 0022 0000 0161 00AD 0017 0015 0017 0016 0016 0015 0017 0015 0017 0015 0017 0015 0017 0015 0017 0015 0017 003F 0017 003F 0017 003F 0017 003F 0017 0015 0017 0040 0016 003F 0017 003F 0017 003F 0017 003F 0017 0015 0017 0015 0017 0015 0017 0015 0017 0015 0017 0015 0017 0015 0017 0015 0017 003F 0017 003F 0017 003F 0017 003F 0017 003F 0017 003F 0017 06C3" };
            esphome::remote_base::ProntoProtocol().encode(call.get_data(), data);
            call.set_send_times(1);
            call.perform();
          }
          if(id(living_room_ac).state) {
            auto call = id(my_transmitter).transmit();
            esphome::remote_base::CoolixData data = { 0xB2BF20 };
            esphome::remote_base::CoolixProtocol().encode(call.get_data(), data);
            call.set_send_times(1);
            call.perform();
          }
  
  # button to turn off AC
  - platform: template
    name: "AC Off"
    icon: "mdi:pause-box-outline"
    id: off_button
    on_press:
      # send IR signals to turn on AC according to the AC type specified by the user
      - lambda: |-
          if(id(room_ac).state) {
            auto call = id(my_transmitter).transmit();
            esphome::remote_base::ProntoData data = { "0000 006D 0058 0002 0078 0097 004B 0026 0025 004C 004A 004C 004B 0024 0027 0024 0026 0025 0026 004C 004A 004C 0025 0025 0027 0025 004B 0026 0025 0025 0026 0025 0026 0026 0025 0025 0026 0025 0027 0025 0026 0027 0025 0026 0025 0025 0027 0024 0027 0024 0026 0025 0026 0025 0026 0027 0025 0026 0025 004C 004B 0024 0074 0097 004C 0025 0026 004C 004A 004C 004A 0025 0027 0025 0026 0026 0025 004A 004B 004B 0027 0025 0026 0025 004B 0025 0027 0025 0026 0026 0025 002" };
            esphome::remote_base::ProntoProtocol().encode(call.get_data(), data);
            call.set_send_times(1);
            call.perform();
          }
          if(id(light_ac).state) {
            auto call = id(my_transmitter).transmit();
            esphome::remote_base::ProntoData data = { "0000 006D 0022 0000 0164 00AD 0017 0015 0017 0015 0017 0015 0017 0015 0017 0015 0017 0015 0017 0015 0017 0015 0017 003F 0017 003F 0017 003F 0017 003F 0017 0015 0017 003F 0018 003F 0017 003F 0017 0015 0017 003F 0017 0015 0017 0015 0017 0015 0017 0015 0017 0015 0017 0015 0017 003F 0017 0015 0017 003F 0017 003F 0017 003F 0017 003F 0017 003F 0017 003F 0017 06C3" };
            esphome::remote_base::ProntoProtocol().encode(call.get_data(), data);
            call.set_send_times(1);
            call.perform();
          }
          if(id(living_room_ac).state) {
            auto call = id(my_transmitter).transmit();
            esphome::remote_base::CoolixData data = { 0xB27BE0 };
            esphome::remote_base::CoolixProtocol().encode(call.get_data(), data);
            call.set_send_times(1);
            call.perform();
          }
          
switch:
  # these switches are user input that define what types of AC they have
  # that way we can send the IR signals according to their AC type
  - platform: template
    name: "Room AC"
    id: room_ac
    optimistic: true

  - platform: template
    name: "Light Simulator"
    id: light_ac
    optimistic: true

  - platform: template
    name: "Living Room AC"
    id: living_room_ac
    optimistic: true
          
